openapi: 3.0.0
info:
  title: Calculator API
  version: 1.0.0
servers:
  - url: http://localhost:8000/api/v1
paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserInput'
      responses:
        '201':
          description: User registered
        '400':
          description: Bad request
        '409':
          description: Conflict
  /auth/login:
    post:
      tags:
        - Auth
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUserInput'
      responses:
        '200':
          description: Access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
          headers:
            Set-Cookie:
              schema:
                type: string
        '400':
          description: Invalid email or password
        '403':
          description: Forbidden
  /auth/logout:
    get:
      tags:
        - Auth
      security:
        - BearerAuth: []
      summary: Logout user
      responses:
        '200':
          description: OK
          headers:
            Set-Cookie:
              schema:
                type: string
        '403':
          description: Forbidden
  /auth/refresh:
    get:
      tags:
        - Auth
      security:
        - BearerAuth: []
      summary: Refresh access token
      responses:
        '200':
          description: Access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
          headers:
            Set-Cookie:
              schema:
                type: string
        '403':
          description: Forbidden
  /users/me:
    get:
      tags:
        - Users
      security:
        - bearerAuth: []
      summary: Get user data for authenticated user
      description: Returns the user data for the authenticated user.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/balance:
    get:
      tags:
        - Users
      security:
        - bearerAuth: []
      summary: Get user balance for authenticated user
      description: Returns the user balance for the authenticated user.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: array
                    items:
                      $ref: '#/components/schemas/Balance'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /operations:
    get:
      tags:
        - Operations
      security:
        - BearerAuth: []
      summary: Get available Operations
      responses:
        '200':
          description: A list of Operations
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Operation'
                  total:
                    type: integer
                  page:
                    type: integer
                  totalPages:
                    type: integer
  /records:
    get:
      tags:
        - Records
      security:
        - BearerAuth: []
      summary: Get authenticated user records
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
            minimum: 1
          description: The number of records to return per page
        - in: query
          name: page
          schema:
            type: integer
            default: 1
            minimum: 1
          description: The page number to return
      responses:
        '200':
          description: A list of records
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Record'
                  total:
                    type: integer
                  page:
                    type: integer
                  totalPages:
                    type: integer
    post:
      tags:
        - Records
      security:
        - BearerAuth: []
      summary: Execute an operation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecuteOperationInput'
      responses:
        '201':
          description: The created record
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    oneOf:
                      - type: number
                      - type: string
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '409':
          description: Record with that title already exists
  /records/{recordId}:
    get:
      tags:
        - Records
      security:
        - BearerAuth: []
      summary: Get a record by ID
      parameters:
        - in: path
          name: recordId
          required: true
          schema:
            type: integer
          description: The ID of the record to retrieve
      responses:
        '200':
          description: The requested record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Record'
        '404':
          description: Record with that ID not found
    delete:
      tags:
        - Records
      security:
        - BearerAuth: []
      summary: Delete a record by ID
      parameters:
        - in: path
          name: recordId
          required: true
          schema:
            type: integer
          description: The ID of the record to delete
      responses:
        '204':
          description: Record deleted
        '404':
          description: Record with that ID not found

components:
  schemas:
    CreateUserInput:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        passwordConfirm:
          type: string
      required:
        - name
        - email
        - password
        - passwordConfirm
    LoginUserInput:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    ExecuteOperationInput:
      type: object
      properties:
        operator:
          type: string
          enum:
            - buyCredits
            - addition
            - subtraction
            - multiplication
            - division
            - squareRoot
            - randomString
        a:
          type: number
        b:
          type: number
      required:
        - operator
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        balance:
          $ref: '#/components/schemas/Balance'
        createdAt:
          type: string
        updatedAt:
          type: string
        deletedAt:
          oneOf:
            - type: string
            - type: null
    Balance:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        credits:
          type: number
        createdAt:
          type: string
        updatedAt:
          type: string
        deletedAt:
          oneOf:
            - type: string
            - type: null
    Operation:
      type: object
      properties:
        id:
          type: string
        cost:
          type: number
        type:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        deletedAt:
          oneOf:
            - type: string
            - type: null
      required:
        - id
        - name
        - type
    Record:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        operationId:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        deletedAt:
          oneOf:
            - type: string
            - type: null

  responses:
    UnauthorizedError:
      description: Unauthorized error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Unauthorized
    NotFoundError:
      description: Not found error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: User not found
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Internal server error
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
